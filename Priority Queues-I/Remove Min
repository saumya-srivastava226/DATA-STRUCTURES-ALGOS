import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

// 	int removeMin()  throws PriorityQueueException{
// 		// Complete this function
// 		// Throw the exception PriorityQueueException if queue is empty
//         if(isEmpty())
//             throw new PriorityQueueException();
        
//         int returnElement=heap.get(0);
        
//         int lastIndex=heap.size()-1;
//         heap.set(0,heap.get(lastIndex));
//         heap.remove(lastIndex);
        
//         int parentIndex=0;
//         int childIndex1=((2*parentIndex)+1);
//         int childIndex2=((2*parentIndex)+2);
        
//         while(childIndex<heap.size())
//         {
//             if((heap.get(parentIndex)>heap.get(childIndex1))||(heap.get(parentIndex)>heap.get(childIndex2)))
            
//               {
//                    int ele=Math.min(heap.get(parentIndex),Math.min(heap.get(childIndex1),heap.get(childIndex2)));
//                    int minIndex=heap.indexOf(ele);
//                    heap.set(minIndex,heap.get(parentIndex));
//                    heap.set(parentIndex,ele);
            
//                     parentIndex=minIndex;
            
//         	        childIndex1=((2*parentIndex)+1);
//                     childIndex2=((2*parentIndex)+2);
        
            
//           
    
      //       else
         //      break;
            
   //   } 
        
  //     return returnElement;
        
//	}
            
    
     int removeMin() throws PriorityQueueException{
		if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
		int temp = heap.get(0);
		heap.set(0, heap.get(heap.size() - 1));
		heap.remove(heap.size() - 1);
		int parentIndex = 0;
         int leftChildIndex=2*parentIndex+1;
         int rightChildIndex=2*parentIndex+2;
         while(leftChildIndex<heap.size())
         {
             int minIndex=parentIndex;
             
             if(heap.get(leftChildIndex)<heap.get(minIndex))
             {
                 minIndex=leftChildIndex;
             }
             if(rightChildIndex<heap.size()&&heap.get(rightChildIndex)<heap.get(minIndex))
             {
                 minIndex=rightChildIndex;
             }
             if(minIndex==parentIndex)
                 break;
             int ele=heap.get(minIndex);
             heap.set(minIndex,heap.get(parentIndex));
             heap.set(parentIndex,ele);
             
             parentIndex=minIndex;
             leftChildIndex=2*parentIndex+1;
             rightChildIndex=2*parentIndex+2;
             
         }
         return temp;
		
     }	
}



class PriorityQueueException extends Exception {

}
