import java.util.Queue;
import java.util.PriorityQueue;
import java.util.LinkedList;
import java.util.*;

public class Solution {
	
    
   
    
	public static int buyTicket(int input[], int k) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/

        // We will have to build a max heap
        int time=0;
        Queue<Integer> queue=new LinkedList<>();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>(Collections.reverseOrder());
//        for(int i=0;i<input.length;i++)
//         {
//            q.add(i);
//         }
//     	for(int i=0;i<input.length;i++)
//         {
//             pq.add(input[i]);
//         }
        
       
        // for(int i=0;i<q.size();i++)
        // {
        //     if(input[q.peek()]>pq.peek())
        //     {
        //         time++;
        //         pq.poll();
        //         q.poll();
        //     }
        //     else
        //     {
        //         int temp=q.poll();
        //         q.add(temp);
        //     }
        // }
        // return time;
        for (int i=0;i<input.length;i++){
            queue.add(i);
            pq.add(input[i]);
        }
        
        
        
        while (!queue.isEmpty()){
            
            if (input[queue.peek()] < pq.peek())
            {
                queue.add(queue.poll());
            }
            
            else
            {
                int idx = queue.poll();
                pq.remove();
                time++;
                if (idx == k)
                {
                    break;
                }
            }
        }
     
    return time;
        
	}
}
