public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		//Your code goes here
        
        BinaryTreeNode<Integer> root= buildTree(postOrder, inOrder, 0, postOrder.length-1,0,inOrder.length-1);
        return root;
        
        
        
	}
    public static BinaryTreeNode<Integer> buildTree(int[] post, int in[], int siPost, int eiPost, int siIn, int eiIn)
    {
        if(siPost>eiPost)
            return null;
        int rootData=post[eiPost];
        BinaryTreeNode<Integer> root= new BinaryTreeNode<Integer>(rootData);
        
        
        
        int rootIndex=-1;// searching for roots in inorder
        for(int i=siIn;i<=eiIn;i++)
        {
            if(in[i]==root.data)
            {
                rootIndex=i;
                break;
            }
        }
        int eiInLeft=rootIndex-1;
        int siInRight=rootIndex+1;
        int siInLeft=siIn;
        int eiInRight=eiIn;
        
        int siPostLeft=siPost;
        int eiPostRight=eiPost-1;
        
        int leftsubtreelen= eiInLeft-siInLeft+1;
        
        int eiPostLeft= siPostLeft+leftsubtreelen-1;
        int siPostRight=eiPostLeft+1;
        
        
        BinaryTreeNode<Integer> left= buildTree(post,in , siPostLeft, eiPostLeft, siInLeft, eiInLeft);
        BinaryTreeNode<Integer> right=buildTree(post, in, siPostRight, eiPostRight, siInRight, eiInRight);
        
        root.left=left;
        root.right=right;
        
        return root;
        
        
        
        
        
    }
}
