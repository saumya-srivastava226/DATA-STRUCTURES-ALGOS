public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
		
     int [][] dp=new int[n+1][maxWeight+1];
        
        for(int i=n-1;i>=0;i--)
        {
            for(int w=0;w<=maxWeight;w++)
            {
                if(weights[i]>w)
                {
                    dp[i][w]=dp[i+1][w];
                }
                else
                {
                    dp[i][w]=Math.max(values[i]+dp[i+1][w-weights[i]], dp[i+1][w]);
                }
            }
        }
        
        return dp[0][maxWeight];
        
        
	}
   /* public static int knapsackHelper(int[] weights, int[] values, int n, int maxWeight, int i)
    {
        if(i==n)
            return 0;
        int myans;
        
          if(weights[i]>maxWeight)
          {
             myans= knapsackHelper(weights,values,n,maxWeight,i+1);
          }
        else
            {
                int ans1=knapsackHelper(weights,values,n,maxWeight,i+1);
                int ans2=values[i]+knapsackHelper(weights,values,n,maxWeight-weights[i],i+1);
                myans=Math.max(ans1,ans2);
                
            }
        
        return myans;
        
        */
    

}
